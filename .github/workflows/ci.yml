name: Django CI

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Run Flake8
        run: flake8 .
  test:
    needs: lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: habits
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 15111983
        ports: ['5432:5432']
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run migrations
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        NAME: habits
        USER: postgres
        PASSWORD: 15111983
        HOST: 127.0.0.1
        PORT: 5432
        STRIPE_API_KEY: ${{ secrets.STRIPE_API_KEY }}
        CELERY_RESULT_BACKEND: redis://127.0.0.1:6379/0
        CELERY_BROKER_URL: redis://127.0.0.1:6379/0
        EMAIL_TO_CONSOLE: ${{ secrets.EMAIL_TO_CONSOLE }}
        EMAIL_BACKEND: ${{ secrets.EMAIL_BACKEND }}
        EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
        EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
        EMAIL_USE_SSL: ${{ secrets.EMAIL_USE_SSL }}
        EMAIL_USE_TLS: ${{ secrets.EMAIL_USE_TLS }}
      run: python manage.py migrate

    - name: Run tests
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        NAME: training
        USER: postgres
        PASSWORD: 15111983
        HOST: 127.0.0.1
        PORT: 5432
        STRIPE_API_KEY: ${{ secrets.STRIPE_API_KEY }}
        CELERY_RESULT_BACKEND: redis://127.0.0.1:6379/0
        CELERY_BROKER_URL: redis://127.0.0.1:6379/0
        EMAIL_TO_CONSOLE: ${{ secrets.EMAIL_TO_CONSOLE }}
        EMAIL_BACKEND: ${{ secrets.EMAIL_BACKEND }}
        EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
        EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
        EMAIL_USE_SSL: ${{ secrets.EMAIL_USE_SSL }}
        EMAIL_USE_TLS: ${{ secrets.EMAIL_USE_TLS }}
      run: python manage.py test

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/projecthabittracker:${{ github.sha }} .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/projecthabittracker:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Set up Venv
        run: | 
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          PROJECT_PATH="/home/${{ secrets.SSH_USER }}/projecthabittracker"
          mkdir -p "$PROJECT_PATH"
          cd "$PROJECT_PATH"
          
          if [ ! -d ".venv" ]; then
            sudo apt update
            sudo apt install python3 python3-pip python3-venv -y
            python3 -m venv venv
          fi
          EOF

      - name: Install Docker on Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e
          
          # Проверяем установлен ли Docker
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            # Добавляем пользователя в группу docker
            sudo usermod -aG docker $USER
            
            # Запускаем демон Docker
            sudo systemctl enable docker
            sudo systemctl start docker
          fi
          
          # Проверяем установку
          docker --version
          echo "Docker installed and running!"
          EOF

      - name: Deploy Application
        run: |
          # Создаем архив
          git archive --format=tar.gz -o deploy.tar.gz HEAD
          
          # Добавляем .env в архив
          tar -rf deploy.tar.gz .env
          
          # Копируем архив на сервер
          scp -o StrictHostKeyChecking=no deploy.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/
          
          # Деплой
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'DEPLOY_EOF'
          set -e

          echo "=== Starting deployment ==="
    
          # Создаем директорию
          sudo mkdir -p /opt/app
          sudo chown $USER:$USER /opt/app
    
          # Распаковываем архив
          tar xzf /tmp/deploy.tar.gz -C /opt/app
          cd /opt/app
    
          # Проверяем файлы
          echo "=== Files in /opt/app ==="
          ls -la
    
          # Запускаем приложение
          echo "=== Starting containers ==="
          sudo docker compose down 2>/dev/null || true
          sudo docker compose up -d --build
    
          echo "=== Deployment completed ==="
          sudo docker compose ps
          DEPLOY_EOF

#  deploy:
#    runs-on: ubuntu-latest
#    needs: build
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Setup SSH connection
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.SERVER_IP }}
#          username: ${{ secrets.SSH_USER }}
#          key: ${{ secrets.SSH_KEY }}
#          port: 22
#          script: |
#            PROJECT_PATH="/home/${{ secrets.SSH_USER }}/projecthabittracker"
#            mkdir -p "$PROJECT_PATH"
#            cd "$PROJECT_PATH"
#            cat << 'EOF' > .env
#            SECRET_KEY="${{ secrets.SECRET_KEY }}"
#            NAME="${{ secrets.NAME }}"
#            USER="${{ secrets.USER }}"
#            PASSWORD="${{ secrets.PASSWORD }}"
#            HOST="${{ secrets.HOST }}"
#            PORT="${{ secrets.PORT }}"
#
#            EMAIL_HOST="${{ secrets.EMAIL_HOST }}"
#            EMAIL_PORT="${{ secrets.EMAIL_PORT }}"
#            EMAIL_USE_SSL="${{ secrets.EMAIL_USE_SSL }}"
#            EMAIL_USE_TLS="${{ secrets.EMAIL_USE_TLS }}"
#
#            # Django
#            DEBUG=False
#
#            # Stripe
#            STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}
#            STRIPE_API_VERSION=${{ secrets.STRIPE_API_VERSION }}
#
#            # Redis
#            REDIS_HOST=${{ secrets.REDIS_HOST }}
#            REDIS_PORT=${{ secrets.REDIS_PORT }}
#            REDIS_DB=${{ secrets.REDIS_DB }}
#
#            EOF
#
#            if [ ! -d "venv" ]; then
#              python3 -m venv venv
#            fi
#
#            git fetch --all
#            git reset --hard origin/${{ github.ref_name }}
#
#            sudo apt install python3 python3-pip python3-venv -y
#            cd ..
#            sudo apt install postgresql postgresql-contrib
#            sudo -u postgres psql -c "ALTER USER ${{ secrets.USER }} PASSWORD '${{ secrets.PASSWORD }}';"
#            sudo -u postgres psql -c 'create database ${{ secrets.NAME }};'
#            python3 -m venv ./.venv
#            . ./venv/bin/activate
#            cd projecthabittracker/
#            mkdir static
#            pip3 install -r requirements.txt
#            python3 manage.py migrate
#            python manage.py collectstatic --noinput
#            sudo systemctl restart myapp.service || true
